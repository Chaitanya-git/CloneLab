#!/usr/bin/python
import getopt
import subprocess
import sys
import requests
import os

def get_group(base_url, token_segment, namespace):
    final_url = base_url + 'groups?' + token_segment + "search=" + namespace
    r = requests.get(final_url)
    results = r.json()
    
    i = 0
    if len(results) > 1:
        print("Multiple group candidates found. Select the required candidate: ")
        for i, result in enumerate(results):
            print("\t" + str(i) + ') '  + result['web_url'])
    
        i = int(input())
    
    group = None if not results else results[i]

    return group 


def clone_group(base_url, token_segment, group, parent_dir="."):
    subgroups_url = base_url + "groups/" + str(group['id']) + "/subgroups?" + token_segment
    projects_url = base_url + "groups/" + str(group['id']) + "/projects?" + token_segment
    
    subgroups = requests.get(subgroups_url).json()
    projects = requests.get(projects_url).json()
    working_dir = parent_dir + '/' + group['name']

    if not os.path.exists(working_dir):
        os.mkdir(working_dir)

    for project in projects:
        project_dir = working_dir + '/' + project['name']

        if os.path.exists(project_dir):
            print("\nEntering project " + project['name'])
            p = subprocess.Popen(['git', 'pull'], cwd=project_dir)
        else:
            p = subprocess.Popen(['git', 'clone', project['http_url_to_repo']], cwd=working_dir)
        p.wait()

    for subgroup in subgroups:
        print("\nEntering group " + subgroup['name'])
        clone_group(base_url, token_segment, subgroup, working_dir)


def main(argv):
    opts = []
    args = []
    try:
        opts, args = getopt.getopt(argv, "ht:", ["help", "token"])
    except getopt.GetoptError as err:
        print("Error:" + str(err))
    
    access_token = None
    base_url =  'https://gitlab.com/api/v4/'
    for opt, arg in opts:
        if opt == '-h' or opt == '--help':
            print_usage()
        elif opt == '-t' or opt == '--token':
            access_token = arg

    if not args:
        print("Group namespace not provided. Exiting...")
        return

    token_segment = ""
    if access_token is not None:
        token_segment = "private_token=" + access_token + "&"

    namespace = args[0]
    
    group = get_group(base_url, token_segment, namespace)
    
    if not group:
        print("Group " + namespace + " not found.")
        return
    
    clone_group(base_url, token_segment, group)


if __name__ == "__main__":
    main(sys.argv[1:])

