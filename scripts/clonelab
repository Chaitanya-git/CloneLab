#!/usr/bin/python3
import getopt
import subprocess
import sys
import requests
import os

def print_usage():
    print("""Usage: clonelab [Optional parameters] <namspace search string> [git parameters]
            Optional parameters:
                --token=    -t      Specify access token to access private repositories
                --dir=      -d      Specify a different working directory to clone into
                --help      -h      Print this usage help
            Options not recognized by clonelab will be passed on to git 
            """)

def get_group(base_url, token_segment, namespace):
    final_url = base_url + 'groups?' + token_segment + "search=" + namespace
    r = requests.get(final_url)
    results = r.json()
    if r.status_code != 200:
        print("Gitlab server returned an error response: " + r.text)
        return None

    i = 0
    if len(results) > 1:
        print("Multiple group candidates found. Select the required candidate: ")
        for i, result in enumerate(results):
            print("\t" + str(i) + ') '  + result['web_url'])
    
        i = int(input())
    
    group = None if not results else results[i]

    return group 


def clone_group(base_url, token_segment, group, git_options, parent_dir="."):
    subgroups_url = base_url + "groups/" + str(group['id']) + "/subgroups?" + token_segment
    projects_url = base_url + "groups/" + str(group['id']) + "/projects?" + token_segment
    
    subgroups = requests.get(subgroups_url).json()
    projects = requests.get(projects_url).json()
    working_dir = parent_dir + '/' + group['name']

    if not os.path.exists(working_dir):
        os.mkdir(working_dir)

    for project in projects:
        project_dir = working_dir + '/' + project['name']

        if os.path.exists(project_dir):
            print("\nEntering project " + project['name'])
            p = subprocess.Popen(['git', 'pull']+git_options, cwd=project_dir)
        else:
            p = subprocess.Popen(['git', 'clone', project['http_url_to_repo']]+git_options, cwd=working_dir)
        p.wait()

    for subgroup in subgroups:
        print("\nEntering group " + subgroup['name'])
        clone_group(base_url, token_segment, subgroup, git_options,  working_dir)


def main(argv):
    opts = []
    args = []
    try:
        opts, args = getopt.getopt(argv, "ht:d:", ["help", "token=", "dir="])
    except getopt.GetoptError as err:
        print("Error:" + str(err))
    
    access_token = None
    git_options = []
    base_url =  'https://gitlab.com/api/v4/'
    working_dir = "."
    for opt, arg in opts:
        if opt == '-h' or opt == '--help':
            print_usage()
            return
        elif opt == '-t' or opt == '--token':
            access_token = arg
        elif opt == '-d' or opt == '--dir':
            working_dir = os.path.abspath(arg) if arg[0] != '~' else os.path.expanduser(arg)
        else:
            git_options.extend([opt,  arg])

    if not args:
        print("Group namespace not provided. Exiting...")
        return

    token_segment = ""
    if access_token is not None:
        token_segment = "private_token=" + access_token + "&"

    search_string = args[0]
    search_terms = search_string.split('/')
    search_string = ' '.join(search_terms).strip()
    
    group = get_group(base_url, token_segment, search_string)
    
    if not group:
        print("Group " + args[0] + " not found.")
        return
    
    
    clone_group(base_url, token_segment, group, git_options, working_dir)


if __name__ == "__main__":
    main(sys.argv[1:])

