#!/usr/bin/python3
import getopt
import os
import sys
import json
import getpass
import base64

from cryptography.fernet import Fernet, InvalidToken
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.backends import default_backend


def update_tokenfile(tokenfile, tokens):
    json_string = json.dumps(tokens)
    tokenfile.seek(0)
    tokenfile.write(json_string)
    tokenfile.truncate()


def encode_passphrase(passphrase):
    digest = hashes.Hash(hashes.SHA256(), backend=default_backend())
    digest.update(bytes(passphrase, 'utf-8'))
    return base64.urlsafe_b64encode(digest.finalize())


def add_user(tokens, argv):
    try:
        opts, args = getopt.getopt(argv, "u:t:", ["username=", "token="])
    except getopt.GetoptError as err:
        print("Error: " + str(err))
        return tokens

    username = ""
    token = ""
    passphrase = ""

    for opt, arg in opts:
        if opt == '-u' or opt == '--username':
            username = arg
        elif opt == '-t' or opt == '--token':
            token = arg

    if username == "":
        username = input("Enter username: ")

    if token == "":
        token = input("Enter token: ")

    while passphrase == "":
        passphrase = getpass.getpass("Enter new passphrase: ")
        if passphrase != getpass.getpass("Enter passphrase again to confirm:"):
            print("passphrases do not match")
            passphrase = ""

    passphrase = encode_passphrase(passphrase)
    token = bytes(token, 'utf-8')

    if username not in tokens:
        f = Fernet(passphrase)
        tokens[username] = f.encrypt(token).decode('utf-8')
    else:
        print("User already exists")

    return tokens


def update_passphrase(tokens, argv):
    try:
        opts, args = getopt.getopt(argv, "u:", ["username="])
    except getopt.GetoptError as err:
        print("Error: " + str(err))
        return tokens

    username = ""
    token = ""

    for opt, arg in opts:
        if opt == '-u' or opt == '--username':
            username = arg

    if username == "":
        username = input("Enter username: ")

    passphrase = getpass.getpass("Enter passphrase: ")
    passphrase = encode_passphrase(passphrase)

    if username in tokens:
        encrypted_token = bytes(tokens[username], 'utf-8')
        f = Fernet(passphrase)
        try:
            token = f.decrypt(encrypted_token).decode('utf-8')
        except InvalidToken:
            print("Invalid passphrase.")
            return tokens
    else:
        print("Username not recognized by Clonelab. Register user and api token using clonelab-key first.")
        return tokens

    new_passphrase = ""
    while new_passphrase == "":
        new_passphrase = getpass.getpass("Enter new passphrase: ")
        if new_passphrase != getpass.getpass("Enter passphrase again to confirm:"):
            print("passphrases do not match")
            new_passphrase = ""

    new_passphrase = encode_passphrase(new_passphrase)
    f = Fernet(new_passphrase)
    token = bytes(token, 'utf-8')
    encrypted_token = f.encrypt(token)
    tokens[username] = encrypted_token.decode('utf-8')

    return tokens


def update_token(tokens, argv):
    try:
        opts, args = getopt.getopt(argv, "u:t:", ["username=", "token="])
    except getopt.GetoptError as err:
        print("Error: " + str(err))
        return tokens

    username = ""
    token = ""

    for opt, arg in opts:
        if opt == '-u' or opt == '--username':
            username = arg
        elif opt == '-t' or opt == '--token':
            token = arg

    if username == "":
        username = input("Enter username: ")

    if token == "":
        token = input("Enter token: ")

    passphrase = getpass.getpass("Enter passphrase: ")
    passphrase = encode_passphrase(passphrase)

    if username in tokens:
        encrypted_token = bytes(tokens[username], 'utf-8')
        f = Fernet(passphrase)
        try:
            f.decrypt(encrypted_token).decode('utf-8')
        except InvalidToken:
            print("Invalid passphrase.")
            return tokens
        encrypted_token = f.encrypt(bytes(token, 'utf-8')).decode('utf-8')
        tokens[username] = encrypted_token
    else:
        print("Username not recognized by Clonelab. Register user and api token using clonelab-key first.")

    return tokens


def print_usage():
    print("""
        Usage: clonelab-key add/update-passphrase/update-token [Optional parameters]
        
        Optional parameters for add and update-token:
            --username      -u      Username of the user
            --token         -t      The api token for the user
            
        Optional parameters for update-passphrase:
            --username      -u      Username of the user
        
    """)


def main(argv):
    config_dir = os.path.expanduser("~/.config/clonelab/")
    tokenfilename = "tokens"
    tokenfile_path = config_dir + tokenfilename

    if len(argv) == 0:
        print_usage()

    if not os.path.isfile(tokenfile_path):
        print("Token file not found. Creating token file at " + tokenfile_path)
        try:
            os.makedirs(config_dir, exist_ok=True)
        except IOError:
            print("Error creating configuration directory")
            return

        try:
            f = open(tokenfile_path, "w+")
            f.close()
        except IOError:
            print("Error creating configuration file")
            return

    try:
        with open(tokenfile_path, "r+") as tokenfile:

            json_string = tokenfile.read()
            if json_string == "":
                tokens = {}
            else:
                try:
                    tokens = json.loads(json_string)
                except json.JSONDecodeError:
                    print("Error decoding configuration file")
                    return

            if argv[0] == "add":
                tokens = add_user(tokens, argv[1:])
            elif argv[0] == "update-passphrase":
                tokens = update_passphrase(tokens, argv[1:])
            elif argv[0] == "update-token":
                tokens = update_token(tokens, argv[1:])
            elif argv[0] == "help":
                print_usage()
            else:
                print(
                    "Command: " + argv[0] + " not recognized by clonelab-key."
                )
                print_usage()

            update_tokenfile(tokenfile, tokens)

    except IOError as err:
        print("Error opening configuration file: " + str(err))
        return


if __name__ == '__main__':
    main(sys.argv[1:])
