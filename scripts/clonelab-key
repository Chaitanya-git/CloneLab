#!/usr/bin/python3
import getopt
import os
import sys
import json
import getpass
import base64

from cryptography.fernet import Fernet
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.backends import default_backend


def add_user(tokenfile, argv):
    try:
        opts, args = getopt.getopt(argv, "u:t:", ["username=", "token="])
    except getopt.GetoptError as err:
        print("Error: " + str(err))
        return

    username = ""
    token = ""
    passphrase = ""
    json_string = tokenfile.read()
    if json_string == "":
        tokens = {}
    else:
        try:
            tokens = json.loads(json_string)
        except json.JSONDecodeError:
            print("Error decoding configuration file")
            return

    for opt, arg in opts:
        if opt == '-u' or opt == '--username':
            username = arg
        elif opt == '-t' or opt == '--token':
            token = arg

    if username == "":
        username = input("Enter username")

    if token == "":
        token = input("Enter token")

    while passphrase == "":
        passphrase = getpass.getpass("Enter new passphrase: ")
        if passphrase != getpass.getpass("Enter passphrase again to confirm:"):
            print("passphrases do not match")
            passphrase = ""

    digest = hashes.Hash(hashes.SHA3_256(), backend=default_backend())
    digest.update(bytearray(passphrase, 'utf-8'))
    passphrase = base64.urlsafe_b64encode(digest.finalize())
    token = bytes(token, 'utf-8')

    if username not in tokens:
        f = Fernet(passphrase)
        tokens[username] = f.encrypt(token).decode('utf-8')

    print(tokens)
    json_string = json.dumps(tokens)
    tokenfile.seek(0)
    tokenfile.write(json_string)
    tokenfile.truncate()


def update_passphrase(tokenfile, argv):
    raise NotImplementedError


def update_token(tokenfile, argv):
    raise NotImplementedError


def print_usage():
    raise NotImplementedError


def main(argv):
    config_dir = "~/.config/clonelab/"
    tokenfilename = "tokens"
    tokenfile_path = os.path.expanduser(config_dir) + tokenfilename

    if len(argv) == 0:
        print_usage()

    if not os.path.isfile(tokenfile_path):
        print("Token file not found. Creating token file at " + tokenfile_path)
        try:
            os.makedirs(config_dir, exist_ok=True)
        except IOError:
            print("Error creating configuration directory")
            return

        try:
            f = open(tokenfile_path, "w+")
            f.close()
        except IOError:
            print("Error creating configuration file")
            return
    try:
        with open(tokenfile_path, "r+") as tokenfile:
            if argv[0] == "add":
                add_user(tokenfile, argv[1:])
            elif argv[0] == "update-passphrase":
                update_passphrase(tokenfile, argv[1:])
            elif argv[0] == "update-token":
                update_token(tokenfile, argv[1:])
            else:
                print(
                    "Command: " + argv[0] + " not recognized by clonelab-key."
                )
                print_usage()
    except IOError as err:
        print("Error opening configuration file: " + str(err))
        return


if __name__ == '__main__':
    main(sys.argv[1:])
